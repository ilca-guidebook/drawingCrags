{"version":3,"sources":["pages/drawingCrags/store/drawingCragsState.ts","pages/drawingCrags/store/index.ts","pages/drawingCrags/components/Image.tsx","pages/drawingCrags/components/PolylineRenderer.tsx","pages/drawingCrags/components/PolylineContainer.tsx","pages/drawingCrags/components/LineEditor.tsx","pages/drawingCrags/drawingCragsBody.tsx","pages/drawingCrags/index.tsx","pages/app/App.tsx","reportWebVitals.ts","index.tsx","pages/drawingCrags/drawingCrags.module.scss"],"names":["CONTAINER_WIDTH","drawingCragsState","imageDimensions","mode","container","isDragging","startPanPoz","panPoz","scale","nameInInput","highlightedLineId","lines","currentLineIndex","imageLoaded","handleMouseEnter","document","getElementsByTagName","classList","add","handleMouseLeave","remove","setIsDragging","setContainer","setStartPanPoz","panPos","setPanPoz","setScale","handleMouseDown","e","preventDefault","x","clientX","y","clientY","handleMouseUp","handleMouseMove","handleWheel","_scale","Math","min","max","deltaY","handleScroll","loadLinesData","linesJson","map","line","points","point","createNewLine","push","name","id","uuid","length","alert","deleteLastPoint","pop","deleteLine","splice","updateSelectedLine","selectedLineName","findIndex","updateLineNewName","newName","editExistingLineName","handleClick","relativePointPos","offsetLeft","window","scrollX","offsetTop","scrollY","makeAutoObservable","this","pos","DrawingCragsState","drawingCragsStoreContext","createContext","DrawingCragsStoreProvider","Provider","useDrawingCragsStore","useContext","observer","image","imageStyle","store","className","styles","cragImage","style","src","alt","onLoad","t","target","height","width","CONTAINER_HEIGHT","setImageDimensions","selected","linePoints","reduce","acc","lineColor","stroke","fill","strokeWidth","svgStyle","drawingCragsStore","selectedLineId","svgContainer","selectedLine","lineEditor","btn","onClick","display","paddingRight","type","onChange","value","marginLeft","downloadObjectAsJson","exportObj","dataStr","encodeURIComponent","JSON","stringify","undefined","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","React","useRef","useState","setImage","handleImportData","a","files","fileReader","FileReader","readAsText","onload","result","parse","handleExportData","forEach","reverse","sort","lineA","lineB","useEffect","current","drawingCrags","fontSize","color","btnContainer","lineName","fileUpload","multiple","accept","imageUrl","URL","createObjectURL","last","ref","imageContainer","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onMouseMove","onWheel","onScroll","DrawingCrags","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.daf9f659.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { WheelEvent, UIEvent, MouseEvent } from \"react\";\nimport { Line, Pos } from \"../types\";\nimport { v1 as uuid } from \"uuid\";\n\nexport const CONTAINER_HEIGHT = 600;\nexport const CONTAINER_WIDTH = 1200;\n\nexport default class drawingCragsState {\n  public imageDimensions: Pos;\n\n  public mode: \"lineEditing\" | \"image\";\n\n  public container?: HTMLDivElement;\n  public isDragging: boolean;\n  public startPanPoz: Pos;\n  public panPoz: Pos;\n  public scale: number;\n\n  public nameInInput: string;\n  public highlightedLineId: string;\n  public lines: Line[];\n  public currentLineIndex: number;\n\n  public imageLoaded: boolean;\n\n  constructor() {\n    makeAutoObservable(this, {});\n\n    this.isDragging = false;\n    this.mode = \"lineEditing\";\n    this.imageDimensions = { x: 0, y: 0 };\n    this.startPanPoz = { x: 0, y: 0 };\n    this.panPoz = { x: 0, y: 0 };\n    this.scale = 1;\n    this.lines = [];\n    this.highlightedLineId = \"\";\n    this.nameInInput = \"\";\n\n    this.imageLoaded = false;\n    this.currentLineIndex = -1;\n  }\n\n  public setImageDimensions(pos: Pos) {\n    this.imageDimensions = pos;\n    this.imageLoaded = true;\n  }\n\n  public setIsDragging(isDragging: boolean) {\n    if (this.mode === \"image\") {\n      this.isDragging = isDragging;\n    }\n  }\n\n  public handleMouseEnter = () => {\n    if (this.mode === \"image\") {\n      document.getElementsByTagName(\"body\")[0].classList.add(\"stop-scrolling\");\n    }\n  };\n\n  public handleMouseLeave = () => {\n    if (this.mode === \"image\") {\n      document.getElementsByTagName(\"body\")[0].classList.remove(\"stop-scrolling\");\n      this.setIsDragging(false);\n    }\n  };\n\n  public setContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  public setStartPanPoz = (panPos: Pos) => {\n    this.startPanPoz = panPos;\n  };\n\n  public setPanPoz = (panPos: Pos) => {\n    this.panPoz = panPos;\n  };\n\n  public setScale = (scale: number) => {\n    this.scale = scale;\n  };\n\n  public handleMouseDown = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === \"image\") {\n      this.setIsDragging(true);\n      this.setStartPanPoz({ x: e.clientX - this.panPoz.x, y: e.clientY - this.panPoz.y });\n    }\n  };\n\n  public handleMouseUp = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === \"image\") {\n      this.setIsDragging(false);\n    }\n  };\n\n  public handleMouseMove = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === \"image\") {\n      if (this.isDragging) {\n        this.setPanPoz({\n          x: e.clientX - this.startPanPoz.x,\n          y: e.clientY - this.startPanPoz.y\n        });\n      }\n    }\n  };\n\n  public handleWheel = (e: WheelEvent) => {\n    if (!this.imageLoaded) return;\n    if (this.mode === \"image\") {\n      const _scale = Math.min(Math.max(0.125, this.scale + e.deltaY * -0.002), 4);\n      this.setScale(_scale);\n    }\n  };\n  public handleScroll = (e: UIEvent) => {\n    e.preventDefault();\n  };\n\n  public loadLinesData = (linesJson: Line[]) => {\n    this.lines = linesJson.map(line => {\n      return {\n        ...line,\n        points: line.points.map(point => ({\n          x: point.x * this.imageDimensions.x,\n          y: point.y * this.imageDimensions.y\n        }))\n      };\n    });\n  };\n\n  public createNewLine = () => {\n    // only create a new line if the old line has points in it\n    if (!this.nameInInput) {\n      alert(\"Please enter a name for the line\");\n      return;\n    }\n\n    this.lines.push({ name: this.nameInInput, points: [], id: uuid() });\n    this.nameInInput = \"\";\n    this.currentLineIndex = this.lines.length - 1;\n  };\n\n  public deleteLastPoint = () => {\n    if (this.lines[this.currentLineIndex] && this.lines[this.currentLineIndex].points.length > 0) {\n      this.lines[this.currentLineIndex].points.pop();\n    }\n  };\n\n  public deleteLine = () => {\n    if (this.lines[this.currentLineIndex]) {\n      this.lines.splice(this.currentLineIndex, 1);\n      this.currentLineIndex--;\n    }\n  };\n\n  public updateSelectedLine = (selectedLineName: string) => {\n    this.currentLineIndex = this.lines.findIndex(line => line.name === selectedLineName);\n  };\n\n  public updateLineNewName = (newName: string) => {\n    this.nameInInput = newName;\n  };\n\n  public editExistingLineName = (newName: string) => {\n    this.lines[this.currentLineIndex].name = newName;\n  };\n\n  public handleClick = (e: MouseEvent) => {\n    if (this.mode === \"lineEditing\") {\n      if (this.container) {\n        if (this.currentLineIndex < 0) {\n          alert(\"first create a new line with a name\");\n          return;\n        }\n        const relativePointPos: Pos = {\n          x: e.clientX - this.container.offsetLeft + window.scrollX,\n          y: e.clientY - this.container.offsetTop + window.scrollY\n        };\n\n        this.lines[this.currentLineIndex].points.push(relativePointPos);\n      }\n    }\n  };\n}\n","import { createContext, useContext } from \"react\";\nimport DrawingCragsState from \"./drawingCragsState\";\n\nconst drawingCragsState = new DrawingCragsState();\nexport const drawingCragsStoreContext = createContext<DrawingCragsState>(drawingCragsState);\nexport const DrawingCragsStoreProvider = drawingCragsStoreContext.Provider;\n\nexport const useDrawingCragsStore = () => useContext(drawingCragsStoreContext);\n","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\n\nimport styles from \"../drawingCrags.module.scss\";\n\nimport { useDrawingCragsStore } from \"../store\";\nimport { CONTAINER_HEIGHT, CONTAINER_WIDTH } from \"../store/drawingCragsState\";\n\ntype Props = {\n  image: string | undefined;\n  imageStyle: Record<string, string>;\n};\n\nconst Image: React.FC<Props> = ({ image, imageStyle }) => {\n  const store = useDrawingCragsStore();\n  const handleImageLoad = (e: SyntheticEvent<HTMLImageElement, Event>) => {\n    const t = e.target as HTMLImageElement;\n    const ratio = CONTAINER_HEIGHT / CONTAINER_WIDTH;\n    const imageRatio = t.height / t.width;\n\n    let height = 0;\n    let width = 0;\n    // wider than container\n    if (imageRatio < ratio) {\n      width = CONTAINER_WIDTH;\n      height = t.height * (CONTAINER_WIDTH / t.width);\n    } else {\n      height = CONTAINER_HEIGHT;\n      width = t.width * (CONTAINER_HEIGHT / t.height);\n    }\n    store.setImageDimensions({ x: width, y: height });\n  };\n\n  if (image) {\n    return (\n      <img\n        className={styles.cragImage}\n        style={imageStyle}\n        src={image}\n        alt=\"\"\n        onLoad={handleImageLoad}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default observer(Image);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\n\nimport { Line } from \"../types\";\n\ntype Props = {\n  line: Line;\n  selected: boolean;\n};\n\nconst SELECTED_LINE_COLOR = \"#1ad34b\";\nconst DEFAULT_LINE_COLOR = \"#6247cb\";\nconst PolylineRenderer: React.FC<Props> = ({ line, selected }) => {\n  const linePoints = line.points.reduce((acc, point) => `${acc} ${point.x},${point.y}`, \"\");\n\n  const lineColor = selected ? SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;\n  if (line.points.length) {\n    return (\n      <polyline points={linePoints} style={{ stroke: lineColor, fill: \"none\", strokeWidth: 3 }} />\n    );\n  } else return null;\n};\nexport default observer(PolylineRenderer);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\n\nimport { useDrawingCragsStore } from \"../store\";\n\nimport PolylineRenderer from \"./PolylineRenderer\";\n\nimport styles from \"../drawingCrags.module.scss\";\n\ntype Props = {\n  svgStyle: Record<string, string>;\n};\n\nconst PolylineContainer: React.FC<Props> = ({ svgStyle }) => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const selectedLineId = drawingCragsStore.lines[drawingCragsStore.currentLineIndex]?.id;\n  return (\n    <svg className={styles.svgContainer} style={svgStyle}>\n      {drawingCragsStore.lines.map(line => (\n        <PolylineRenderer key={line.id} line={line} selected={selectedLineId === line.id} />\n      ))}\n    </svg>\n  );\n};\nexport default observer(PolylineContainer);\n","import React, { ChangeEvent } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useDrawingCragsStore } from \"../store\";\n\nimport styles from \"../drawingCrags.module.scss\";\n\nconst LineEditor: React.FC = () => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const handleLineNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    drawingCragsStore.editExistingLineName(e.target.value);\n  };\n\n  const handleDeleteLastPoint = () => {\n    drawingCragsStore.deleteLastPoint();\n  };\n\n  const handleDeleteLine = () => {\n    drawingCragsStore.deleteLine();\n  };\n\n  const handleLineSelectedChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    drawingCragsStore.updateSelectedLine(e.target.value);\n  };\n\n  const selectedLine = drawingCragsStore.lines[drawingCragsStore.currentLineIndex];\n\n  if (!selectedLine) return null;\n  return (\n    <div className={styles.lineEditor}>\n      Line Editor\n      <div className={styles.btn} onClick={handleDeleteLastPoint}>\n        Delete last point\n      </div>\n      <div className={styles.btn} onClick={handleDeleteLine}>\n        Delete Line\n      </div>\n      <div style={{ display: \"inline-block\" }}>\n        <span style={{ paddingRight: \"6px\" }}>Edit Line Name:</span>\n        <input type=\"text\" onChange={handleLineNameChange} value={selectedLine.name} />\n      </div>\n      <div style={{ display: \"inline-block\", marginLeft: \"6px\" }}>\n        {drawingCragsStore.lines.length > 0 && (\n          <>\n            Select Line:\n            <select\n              name=\"linesSelector\"\n              onChange={handleLineSelectedChange}\n              value={selectedLine.name}\n            >\n              {drawingCragsStore.lines.map(line => (\n                <option key={line.id} value={line.name}>\n                  {line.name}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default observer(LineEditor);\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { v1 as uuid } from \"uuid\";\n\nimport { useDrawingCragsStore } from \"./store\";\n\nimport Image from \"./components/Image\";\nimport PolylineContainer from \"./components/PolylineContainer\";\n\nimport styles from \"./drawingCrags.module.scss\";\nimport { CONTAINER_HEIGHT, CONTAINER_WIDTH } from \"./store/drawingCragsState\";\nimport { Line } from \"./types\";\nimport LineEditor from \"./components/LineEditor\";\nimport { toJS } from \"mobx\";\n\nconst downloadObjectAsJson = (exportObj: Record<string, any>) => {\n  const dataStr =\n    \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj, undefined, 2));\n  const downloadAnchorNode = document.createElement(\"a\");\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\"download\", uuid() + \".json\");\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n};\n\nconst DrawingCragsBody: React.FC = () => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const container = React.useRef<HTMLDivElement>(null);\n  const { imageDimensions, panPoz, scale } = drawingCragsStore;\n  const [image, setImage] = useState<string>();\n\n  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const imageUrl = URL.createObjectURL(e.target.files[0]);\n\n      // reset\n      drawingCragsStore.setImageDimensions({ x: 0, y: 0 });\n      drawingCragsStore.setScale(1);\n\n      setImage(imageUrl);\n    }\n  };\n\n  const handleImportData = async (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const fileReader = new FileReader();\n      fileReader.readAsText(e.target.files[0], \"UTF-8\");\n      fileReader.onload = e => {\n        if (e.target?.result) {\n          drawingCragsStore.loadLinesData(JSON.parse(e.target.result as string) as Line[]);\n        }\n      };\n    }\n  };\n  const handleExportData = async () => {\n    drawingCragsStore.lines.forEach(line => {\n      // smaller y is higher\n      // if this case is true it means the first point is lower than the last point, so reverse\n      if (line.points[0].y < line.points[line.points.length - 1].y) {\n        line.points = line.points.reverse();\n      }\n    });\n    downloadObjectAsJson(\n      drawingCragsStore.lines\n        .sort((lineA, lineB) => lineA.points[0].x - lineB.points[0].x)\n        .map(line => {\n          return {\n            ...line,\n            points: line.points.map(point => ({\n              x: point.x / imageDimensions.x,\n              y: point.y / imageDimensions.y\n            }))\n          };\n        })\n    );\n  };\n\n  const imageStyle: Record<string, string> = {};\n\n  const svgStyle: Record<string, string> = {};\n\n  useEffect(() => {\n    if (container.current) {\n      drawingCragsStore.setContainer(container.current);\n    }\n  }, [container]);\n\n  if (imageDimensions.x) {\n    imageStyle[\"width\"] = `${imageDimensions.x * scale}px`;\n    imageStyle[\"height\"] = `${imageDimensions.y * scale}px`;\n    // imageStyle[\"transform\"] = `scale(${scale})`;\n    svgStyle[\"transform\"] = `scale(${scale})`;\n    svgStyle[\"width\"] = `${imageDimensions.x * scale}px`;\n    svgStyle[\"height\"] = `${imageDimensions.y * scale}px`;\n  }\n  if (panPoz.x) {\n    imageStyle[\"left\"] = `${panPoz.x}px`;\n    svgStyle[\"left\"] = `${panPoz.x}px`;\n  }\n  if (panPoz.y) {\n    imageStyle[\"top\"] = `${panPoz.y}px`;\n    svgStyle[\"top\"] = `${panPoz.y}px`;\n  }\n\n  const handleDrawLineCLick = () => {\n    drawingCragsStore.createNewLine();\n  };\n\n  const handleLineNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    drawingCragsStore.updateLineNewName(e.target.value);\n  };\n\n  return (\n    <div className={styles.drawingCrags}>\n      <h2>Drawing Crags</h2>\n      <div>\n        <div>Welcome to the drawing crags app!</div>\n        <div>\n          To use the app:\n          <ul>\n            <li>Upload click on the upload crag image button to upload an image</li>\n            <li>Give a name to a line and create a new line</li>\n            <li>Start clicking on the image to draw the line points</li>\n            <li>Export the result file using the Export Lines Data button</li>\n          </ul>\n        </div>\n        <div style={{ fontSize: \"90%\", color: \"#727272\" }}>\n          * You can also upload a previously generated file using the Import Lines Data button and\n          edit Lines\n          <br />\n          Play around with the system a bit, we're sure you'll figure things out :)\n        </div>\n        <br />\n      </div>\n      <div>\n        <div className={styles.btnContainer}>\n          <div>\n            {drawingCragsStore.imageLoaded && (\n              <>\n                <div className={styles.btn} onClick={handleDrawLineCLick}>\n                  + New Line\n                </div>\n                <div className={styles.lineName}>\n                  <input\n                    type=\"text\"\n                    onChange={handleLineNameChange}\n                    value={drawingCragsStore.nameInInput}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n          <div>\n            <label className={styles.fileUpload}>\n              <input type=\"file\" multiple accept=\"image/*\" onChange={handleImageChange} />\n              Upload Crag Image\n            </label>\n            <label className={styles.fileUpload}>\n              <input type=\"file\" onChange={handleImportData} />\n              Import Lines Data\n            </label>\n            <div className={styles.btn + \" \" + styles.last} onClick={handleExportData}>\n              Export Lines Data\n            </div>\n          </div>\n        </div>\n        <LineEditor />\n      </div>\n      <div\n        ref={container}\n        className={styles.imageContainer}\n        onMouseEnter={drawingCragsStore.handleMouseEnter}\n        onMouseLeave={drawingCragsStore.handleMouseLeave}\n        onMouseDown={drawingCragsStore.handleMouseDown}\n        onMouseUp={drawingCragsStore.handleMouseUp}\n        onClick={drawingCragsStore.handleClick}\n        onMouseMove={drawingCragsStore.handleMouseMove}\n        onWheel={drawingCragsStore.handleWheel}\n        onScroll={drawingCragsStore.handleScroll}\n      >\n        <Image image={image} imageStyle={imageStyle} />\n        <PolylineContainer svgStyle={svgStyle} />\n      </div>\n    </div>\n  );\n};\nexport default observer(DrawingCragsBody);\n","import DrawingCragsBody from \"./drawingCragsBody\";\nimport { DrawingCragsStoreProvider } from \"./store\";\nimport DrawingCragsState from \"./store/drawingCragsState\";\n\nconst drawingCragsState = new DrawingCragsState();\n\nconst DrawingCrags: React.FC = () => {\n  return (\n    <DrawingCragsStoreProvider value={drawingCragsState}>\n      <DrawingCragsBody />\n    </DrawingCragsStoreProvider>\n  );\n};\nexport default DrawingCrags;\n","import DrawingCrags from \"pages/drawingCrags\";\nimport React from \"react\";\n\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  return <DrawingCrags />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from 'pages/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawingCrags\":\"drawingCrags_drawingCrags__3pW90\",\"imageContainer\":\"drawingCrags_imageContainer__36Bch\",\"cragImage\":\"drawingCrags_cragImage__vtfuJ\",\"svgContainer\":\"drawingCrags_svgContainer__3H_v0\",\"btn\":\"drawingCrags_btn__J0OEV\",\"last\":\"drawingCrags_last__1BVBA\",\"fileUpload\":\"drawingCrags_fileUpload__1zDh6\",\"btnContainer\":\"drawingCrags_btnContainer__3jUL_\",\"lineName\":\"drawingCrags_lineName__AiLPr\",\"lineEditor\":\"drawingCrags_lineEditor__BTi0e\"};"],"sourceRoot":""}