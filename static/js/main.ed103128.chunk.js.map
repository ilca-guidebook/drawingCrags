{"version":3,"sources":["pages/drawingCrags/store/drawingCragsState.ts","pages/drawingCrags/store/index.ts","pages/drawingCrags/components/Image.tsx","pages/drawingCrags/components/PolylineRenderer.tsx","pages/drawingCrags/components/PolylineContainer.tsx","pages/drawingCrags/components/LineEditor.tsx","pages/drawingCrags/drawingCragsBody.tsx","pages/drawingCrags/index.tsx","pages/app/App.tsx","reportWebVitals.ts","index.tsx","pages/drawingCrags/drawingCrags.module.scss"],"names":["MODES","CONTAINER_WIDTH","drawingCragsState","imageDimensions","mode","container","isDragging","startPanPoz","panPoz","draggedLine","scale","nameInInput","highlightedLineId","lines","currentLineIndex","imageLoaded","handleMouseEnter","IMAGE","document","getElementsByTagName","classList","add","handleMouseLeave","remove","setIsDragging","setContainer","setStartPanPoz","panPos","setPanPoz","setScale","handleMouseDown","e","preventDefault","x","clientX","y","clientY","handleMouseUp","handleMouseMove","LINE_EDITING","relativePointPos","offsetLeft","window","scrollX","offsetTop","scrollY","handleWheel","_scale","Math","min","max","deltaY","handleScroll","loadLinesData","linesJson","map","line","points","point","createNewLine","push","name","id","uuid","length","alert","deleteLastPoint","pop","deleteLine","splice","updateSelectedLine","selectedLineName","findIndex","updateLineNewName","newName","editExistingLineName","handleClick","INITIAL","onKeyDown","key","makeAutoObservable","this","pos","DrawingCragsState","drawingCragsStoreContext","createContext","DrawingCragsStoreProvider","Provider","useDrawingCragsStore","useContext","observer","image","imageStyle","store","className","styles","cragImage","style","src","alt","onLoad","t","target","height","width","CONTAINER_HEIGHT","setImageDimensions","selected","linePoints","reduce","acc","lineColor","stroke","fill","strokeWidth","svgStyle","drawingCragsStore","selectedLineId","svgContainer","selectedLine","lineEditor","btn","onClick","display","paddingRight","type","onChange","value","marginLeft","downloadObjectAsJson","exportObj","dataStr","encodeURIComponent","JSON","stringify","undefined","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","React","useRef","useState","setImage","handleImportData","a","files","fileReader","FileReader","readAsText","onload","result","parse","handleExportData","forEach","reverse","sort","lineA","lineB","useEffect","current","drawingCrags","fontSize","color","btnContainer","lineName","fileUpload","multiple","accept","imageUrl","URL","createObjectURL","last","ref","imageContainer","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onMouseMove","onWheel","onScroll","DrawingCrags","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"4JAQKA,E,oHAFQC,EAAkB,M,SAE1BD,K,kBAAAA,E,cAAAA,E,4BAAAA,M,SAMgBE,E,WAmBnB,aAAe,IAAD,gCAlBPC,qBAkBO,OAhBPC,UAgBO,OAdPC,eAcO,OAbPC,gBAaO,OAZPC,iBAYO,OAXPC,YAWO,OAVPC,iBAUO,OATPC,WASO,OAPPC,iBAOO,OANPC,uBAMO,OALPC,WAKO,OAJPC,sBAIO,OAFPC,iBAEO,OA6BPC,iBAAmB,WACpB,EAAKZ,OAASJ,EAAMiB,OACtBC,SAASC,qBAAqB,QAAQ,GAAGC,UAAUC,IAAI,mBA/B7C,KAmCPC,iBAAmB,WACpB,EAAKlB,OAASJ,EAAMiB,QACtBC,SAASC,qBAAqB,QAAQ,GAAGC,UAAUG,OAAO,kBAC1D,EAAKC,eAAc,KAtCT,KA0CPC,aAAe,SAACpB,GACrB,EAAKA,UAAYA,GA3CL,KA8CPqB,eAAiB,SAACC,GACvB,EAAKpB,YAAcoB,GA/CP,KAkDPC,UAAY,SAACD,GAClB,EAAKnB,OAASmB,GAnDF,KAsDPE,SAAW,SAACnB,GACjB,EAAKA,MAAQA,GAvDD,KA0DPoB,gBAAkB,SAACC,GACxBA,EAAEC,iBACG,EAAKjB,aACN,EAAKX,OAASJ,EAAMiB,QACtB,EAAKO,eAAc,GACnB,EAAKE,eAAe,CAAEO,EAAGF,EAAEG,QAAU,EAAK1B,OAAOyB,EAAGE,EAAGJ,EAAEK,QAAU,EAAK5B,OAAO2B,MA/DrE,KAmEPE,cAAgB,SAACN,GACtBA,EAAEC,iBACG,EAAKjB,aACN,EAAKX,OAASJ,EAAMiB,OACtB,EAAKO,eAAc,IAvET,KA2EPc,gBAAkB,SAACP,GAExB,GADAA,EAAEC,iBACG,EAAKjB,YACV,GAAI,EAAKX,OAASJ,EAAMiB,MAClB,EAAKX,YACP,EAAKsB,UAAU,CACbK,EAAGF,EAAEG,QAAU,EAAK3B,YAAY0B,EAChCE,EAAGJ,EAAEK,QAAU,EAAK7B,YAAY4B,SAG/B,GAAI,EAAK/B,OAASJ,EAAMuC,cAAgB,EAAKlC,UAAW,CAC7D,IAAMmC,EAAwB,CAC5BP,EAAGF,EAAEG,QAAU,EAAK7B,UAAUoC,WAAaC,OAAOC,QAClDR,EAAGJ,EAAEK,QAAU,EAAK/B,UAAUuC,UAAYF,OAAOG,SAGnD,EAAKpC,YAAc+B,IA3FT,KA+FPM,YAAc,SAACf,GACpB,GAAK,EAAKhB,aACN,EAAKX,OAASJ,EAAMiB,MAAO,CAC7B,IAAM8B,EAASC,KAAKC,IAAID,KAAKE,IAAI,KAAO,EAAKxC,OAAoB,KAAZqB,EAAEoB,QAAkB,GACzE,EAAKtB,SAASkB,KAnGJ,KAsGPK,aAAe,SAACrB,GACrBA,EAAEC,kBAvGU,KA0GPqB,cAAgB,SAACC,GACtB,EAAKzC,MAAQyC,EAAUC,KAAI,SAAAC,GACzB,OAAO,2BACFA,GADL,IAEEC,OAAQD,EAAKC,OAAOF,KAAI,SAAAG,GAAK,MAAK,CAChCzB,EAAGyB,EAAMzB,EAAI,EAAK9B,gBAAgB8B,EAClCE,EAAGuB,EAAMvB,EAAI,EAAKhC,gBAAgBgC,YAhH5B,KAsHPwB,cAAgB,WAEhB,EAAKhD,aAKV,EAAKE,MAAM+C,KAAK,CAAEC,KAAM,EAAKlD,YAAa8C,OAAQ,GAAIK,GAAIC,gBAC1D,EAAKpD,YAAc,GACnB,EAAKG,iBAAmB,EAAKD,MAAMmD,OAAS,GAN1CC,MAAM,qCAzHI,KAkIPC,gBAAkB,WACnB,EAAKrD,MAAM,EAAKC,mBAAqB,EAAKD,MAAM,EAAKC,kBAAkB2C,OAAOO,OAAS,GACzF,EAAKnD,MAAM,EAAKC,kBAAkB2C,OAAOU,OApI/B,KAwIPC,WAAa,WACd,EAAKvD,MAAM,EAAKC,oBAClB,EAAKD,MAAMwD,OAAO,EAAKvD,iBAAkB,GACzC,EAAKA,qBA3IK,KA+IPwD,mBAAqB,SAACC,GAC3B,EAAKzD,iBAAmB,EAAKD,MAAM2D,WAAU,SAAAhB,GAAI,OAAIA,EAAKK,OAASU,MAhJvD,KAmJPE,kBAAoB,SAACC,GAC1B,EAAK/D,YAAc+D,GApJP,KAuJPC,qBAAuB,SAACD,GAC7B,EAAK7D,MAAM,EAAKC,kBAAkB+C,KAAOa,GAxJ7B,KA2JPE,YAAc,SAAC7C,GACpB,IAAK,EAAK3B,OAASJ,EAAM6E,SAAW,EAAKzE,OAASJ,EAAMuC,eAAiB,EAAKlC,UAAW,CAGvF,GAFA,EAAKD,KAAOJ,EAAMuC,aAEd,EAAKzB,iBAAmB,EAE1B,YADAmD,MAAM,uCAGR,IAAMzB,EAAwB,CAC5BP,EAAGF,EAAEG,QAAU,EAAK7B,UAAUoC,WAAaC,OAAOC,QAClDR,EAAGJ,EAAEK,QAAU,EAAK/B,UAAUuC,UAAYF,OAAOG,SAGnD,EAAKhC,MAAM,EAAKC,kBAAkB2C,OAAOG,KAAKpB,KAxKpC,KA4KPsC,UAAY,SAAC/C,GACJ,WAAVA,EAAEgD,KAAoB,EAAK3E,OAASJ,EAAMuC,eAC5C,EAAKnC,KAAOJ,EAAM6E,QAClB,EAAKpE,YAAc,OA9KrBuE,YAAmBC,KAAM,IAEzBA,KAAK3E,YAAa,EAClB2E,KAAK7E,KAAOJ,EAAM6E,QAClBI,KAAK9E,gBAAkB,CAAE8B,EAAG,EAAGE,EAAG,GAClC8C,KAAK1E,YAAc,CAAE0B,EAAG,EAAGE,EAAG,GAC9B8C,KAAKzE,OAAS,CAAEyB,EAAG,EAAGE,EAAG,GACzB8C,KAAKxE,YAAc,KACnBwE,KAAKvE,MAAQ,EACbuE,KAAKpE,MAAQ,GACboE,KAAKrE,kBAAoB,GACzBqE,KAAKtE,YAAc,GAEnBsE,KAAKlE,aAAc,EACnBkE,KAAKnE,kBAAoB,E,sDAG3B,SAA0BoE,GACxBD,KAAK9E,gBAAkB+E,EACvBD,KAAKlE,aAAc,I,2BAGrB,SAAqBT,GACf2E,KAAK7E,OAASJ,EAAMiB,QACtBgE,KAAK3E,WAAaA,O,KCvDlBJ,EAAoB,IAAIiF,EACjBC,EAA2BC,wBAAiCnF,GAC5DoF,EAA4BF,EAAyBG,SAErDC,EAAuB,kBAAMC,qBAAWL,I,uBCyCtCM,eAnCgB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACjCC,EAAQL,IAmBd,OAAIG,EAEA,qBACEG,UAAWC,IAAOC,UAClBC,MAAOL,EACPM,IAAKP,EACLQ,IAAI,GACJC,OAzBkB,SAACrE,GACvB,IAAMsE,EAAItE,EAAEuE,OAIRC,EAAS,EACTC,EAAQ,EAHOH,EAAEE,OAASF,EAAEG,MADlBC,IAOZD,EAAQvG,EACRsG,EAASF,EAAEE,QAAUtG,EAAkBoG,EAAEG,SAEzCD,EFtB0B,IEuB1BC,EAAQH,EAAEG,OFvBgB,IEuBYH,EAAEE,SAE1CV,EAAMa,mBAAmB,CAAEzE,EAAGuE,EAAOrE,EAAGoE,OAcjC,QCtBIb,eAV2B,SAAC,GAAwB,IAAtBlC,EAAqB,EAArBA,KAAMmD,EAAe,EAAfA,SAC3CC,EAAapD,EAAKC,OAAOoD,QAAO,SAACC,EAAKpD,GAAN,gBAAmBoD,EAAnB,YAA0BpD,EAAMzB,EAAhC,YAAqCyB,EAAMvB,KAAK,IAEhF4E,EAAYJ,EALQ,UACD,UAKzB,OAAInD,EAAKC,OAAOO,OAEZ,0BAAUP,OAAQmD,EAAYX,MAAO,CAAEe,OAAQD,EAAWE,KAAM,OAAQC,YAAa,KAE3E,QCKDxB,eAZ4B,SAAC,GAAkB,IAAD,EAAfyB,EAAe,EAAfA,SACtCC,EAAoB5B,IAEpB6B,EAAc,UAAGD,EAAkBvG,MAAMuG,EAAkBtG,yBAA7C,aAAG,EAA6DgD,GACpF,OACE,qBAAKgC,UAAWC,IAAOuB,aAAcrB,MAAOkB,EAA5C,SACGC,EAAkBvG,MAAM0C,KAAI,SAAAC,GAAI,OAC/B,cAAC,EAAD,CAAgCA,KAAMA,EAAMmD,SAAUU,IAAmB7D,EAAKM,IAAvDN,EAAKM,YC0CrB4B,eAxDc,WAC3B,IAAM0B,EAAoB5B,IAkBpB+B,EAAeH,EAAkBvG,MAAMuG,EAAkBtG,kBAE/D,OAAKyG,EAEH,sBAAKzB,UAAWC,IAAOyB,WAAvB,wBAEE,qBAAK1B,UAAWC,IAAO0B,IAAKC,QAlBF,WAC5BN,EAAkBlD,mBAiBhB,+BAGA,qBAAK4B,UAAWC,IAAO0B,IAAKC,QAjBP,WACvBN,EAAkBhD,cAgBhB,yBAGA,sBAAK6B,MAAO,CAAE0B,QAAS,gBAAvB,UACE,sBAAM1B,MAAO,CAAE2B,aAAc,OAA7B,6BACA,uBAAOC,KAAK,OAAOC,SA9BI,SAAC/F,GAC5BqF,EAAkBzC,qBAAqB5C,EAAEuE,OAAOyB,QA6BOA,MAAOR,EAAa1D,UAEzE,qBAAKoC,MAAO,CAAE0B,QAAS,eAAgBK,WAAY,OAAnD,SACGZ,EAAkBvG,MAAMmD,OAAS,GAChC,oDAEE,wBACEH,KAAK,gBACLiE,SA1BqB,SAAC/F,GAChCqF,EAAkB9C,mBAAmBvC,EAAEuE,OAAOyB,QA0BpCA,MAAOR,EAAa1D,KAHtB,SAKGuD,EAAkBvG,MAAM0C,KAAI,SAAAC,GAAI,OAC/B,wBAAsBuE,MAAOvE,EAAKK,KAAlC,SACGL,EAAKK,MADKL,EAAKM,iBAxBN,QCZtBmE,EAAuB,SAACC,GAC5B,IAAMC,EACJ,gCAAkCC,mBAAmBC,KAAKC,UAAUJ,OAAWK,EAAW,IACtFC,EAAqBtH,SAASuH,cAAc,KAClDD,EAAmBE,aAAa,OAAQP,GACxCK,EAAmBE,aAAa,WAAY3E,cAAS,SACrD7C,SAASyH,KAAKC,YAAYJ,GAC1BA,EAAmBK,QACnBL,EAAmBjH,UAsKNmE,eAnKoB,WACjC,IAAM0B,EAAoB5B,IAEpBnF,EAAYyI,IAAMC,OAAuB,MACvC5I,EAAmCiH,EAAnCjH,gBAAiBK,EAAkB4G,EAAlB5G,OAAQE,EAAU0G,EAAV1G,MACjC,EAA0BsI,qBAA1B,mBAAOrD,EAAP,KAAcsD,EAAd,KAcMC,EAAgB,uCAAG,WAAOnH,GAAP,eAAAoH,EAAA,sDACnBpH,EAAEuE,OAAO8C,OAASrH,EAAEuE,OAAO8C,MAAM,MAC7BC,EAAa,IAAIC,YACZC,WAAWxH,EAAEuE,OAAO8C,MAAM,GAAI,SACzCC,EAAWG,OAAS,SAAAzH,GAAM,IAAD,GACvB,UAAIA,EAAEuE,cAAN,aAAI,EAAUmD,SACZrC,EAAkB/D,cAAcgF,KAAKqB,MAAM3H,EAAEuE,OAAOmD,WANnC,2CAAH,sDAWhBE,EAAgB,uCAAG,sBAAAR,EAAA,sDACvB/B,EAAkBvG,MAAM+I,SAAQ,SAAApG,GAG1BA,EAAKC,OAAO,GAAGtB,EAAIqB,EAAKC,OAAOD,EAAKC,OAAOO,OAAS,GAAG7B,IACzDqB,EAAKC,OAASD,EAAKC,OAAOoG,cAG9B5B,EACEb,EAAkBvG,MACfiJ,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMtG,OAAO,GAAGxB,EAAI+H,EAAMvG,OAAO,GAAGxB,KAC3DsB,KAAI,SAAAC,GACH,OAAO,2BACFA,GADL,IAEEC,OAAQD,EAAKC,OAAOF,KAAI,SAAAG,GAAK,MAAK,CAChCzB,EAAGyB,EAAMzB,EAAI9B,EAAgB8B,EAC7BE,EAAGuB,EAAMvB,EAAIhC,EAAgBgC,YAhBhB,2CAAH,qDAuBhByD,EAAqC,GAErCuB,EAAmC,GAEzC8C,qBAAU,WACJ5J,EAAU6J,SACZ9C,EAAkB3F,aAAapB,EAAU6J,WAE1C,CAAC7J,IAEAF,EAAgB8B,IAClB2D,EAAU,MAAV,UAAyBzF,EAAgB8B,EAAIvB,EAA7C,MACAkF,EAAU,OAAV,UAA0BzF,EAAgBgC,EAAIzB,EAA9C,MAEAyG,EAAQ,UAAR,gBAAiCzG,EAAjC,KACAyG,EAAQ,MAAR,UAAuBhH,EAAgB8B,EAAIvB,EAA3C,MACAyG,EAAQ,OAAR,UAAwBhH,EAAgBgC,EAAIzB,EAA5C,OAEEF,EAAOyB,IACT2D,EAAU,KAAV,UAAwBpF,EAAOyB,EAA/B,MACAkF,EAAQ,KAAR,UAAsB3G,EAAOyB,EAA7B,OAEEzB,EAAO2B,IACTyD,EAAU,IAAV,UAAuBpF,EAAO2B,EAA9B,MACAgF,EAAQ,IAAR,UAAqB3G,EAAO2B,EAA5B,OAWF,OACE,sBAAK2D,UAAWC,IAAOoE,aAAvB,UACE,+CACA,gCACE,oEACA,kDAEE,+BACE,iGACA,6EACA,qFACA,iGAGJ,sBAAKlE,MAAO,CAAEmE,SAAU,MAAOC,MAAO,WAAtC,gHAGE,uBAHF,+EAMA,0BAEF,gCACE,sBAAKvE,UAAWC,IAAOuE,aAAvB,UACE,8BACGlD,EAAkBrG,aACjB,qCACE,qBAAK+E,UAAWC,IAAO0B,IAAKC,QAnCd,WAC1BN,EAAkBzD,iBAkCN,wBAGA,qBAAKmC,UAAWC,IAAOwE,SAAvB,SACE,uBACE1C,KAAK,OACLC,SArCW,SAAC/F,GAC5BqF,EAAkB3C,kBAAkB1C,EAAEuE,OAAOyB,QAqC7BA,MAAOX,EAAkBzG,qBAMnC,gCACE,wBAAOmF,UAAWC,IAAOyE,WAAzB,UACE,uBAAO3C,KAAK,OAAO4C,UAAQ,EAACC,OAAO,UAAU5C,SA3H/B,SAAC/F,GACzB,GAAIA,EAAEuE,OAAO8C,OAASrH,EAAEuE,OAAO8C,MAAM,GAAI,CACvC,IAAMuB,EAAWC,IAAIC,gBAAgB9I,EAAEuE,OAAO8C,MAAM,IAGpDhC,EAAkBV,mBAAmB,CAAEzE,EAAG,EAAGE,EAAG,IAChDiF,EAAkBvF,SAAS,GAE3BoH,EAAS0B,OAkHH,uBAIA,wBAAO7E,UAAWC,IAAOyE,WAAzB,UACE,uBAAO3C,KAAK,OAAOC,SAAUoB,IAD/B,uBAIA,qBAAKpD,UAAWC,IAAO0B,IAAM,IAAM1B,IAAO+E,KAAMpD,QAASiC,EAAzD,qCAKJ,cAAC,EAAD,OAEF,sBACEoB,IAAK1K,EACLyF,UAAWC,IAAOiF,eAClBC,aAAc7D,EAAkBpG,iBAChCkK,aAAc9D,EAAkB9F,iBAChC6J,YAAa/D,EAAkBtF,gBAC/BsJ,UAAWhE,EAAkB/E,cAC7BqF,QAASN,EAAkBxC,YAC3ByG,YAAajE,EAAkB9E,gBAC/BgJ,QAASlE,EAAkBtE,YAC3ByI,SAAUnE,EAAkBhE,aAC5B6C,MAAOkB,EAXT,UAaE,cAAC,EAAD,CAAOxB,MAAOA,EAAOC,WAAYA,IACjC,cAAC,EAAD,CAAmBuB,SAAUA,aCpL/BjH,EAAoB,IAAIiF,EASfqG,EAPgB,WAC7B,OACE,cAAClG,EAAD,CAA2ByC,MAAO7H,EAAlC,SACE,cAAC,EAAD,OCASuL,G,MAJO,WACpB,OAAO,cAAC,EAAD,MCQMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnL,SAASoL,eAAe,SAM1BZ,K,kBCfAa,EAAOC,QAAU,CAAC,aAAe,mCAAmC,eAAiB,qCAAqC,UAAY,gCAAgC,aAAe,mCAAmC,IAAM,0BAA0B,KAAO,2BAA2B,WAAa,iCAAiC,aAAe,mCAAmC,SAAW,+BAA+B,WAAa,oC","file":"static/js/main.ed103128.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { WheelEvent, UIEvent, MouseEvent, KeyboardEventHandler } from \"react\";\nimport { Line, Pos } from \"../types\";\nimport { v1 as uuid } from \"uuid\";\n\nexport const CONTAINER_HEIGHT = 600;\nexport const CONTAINER_WIDTH = 1200;\n\nenum MODES {\n  INITIAL = \"initial\",\n  IMAGE = \"image\",\n  LINE_EDITING = \"lineEditing\"\n}\n\nexport default class drawingCragsState {\n  public imageDimensions: Pos;\n\n  public mode: MODES;\n\n  public container?: HTMLDivElement;\n  public isDragging: boolean;\n  public startPanPoz: Pos;\n  public panPoz: Pos;\n  public draggedLine: Pos | null;\n  public scale: number;\n\n  public nameInInput: string;\n  public highlightedLineId: string;\n  public lines: Line[];\n  public currentLineIndex: number;\n\n  public imageLoaded: boolean;\n\n  constructor() {\n    makeAutoObservable(this, {});\n\n    this.isDragging = false;\n    this.mode = MODES.INITIAL;\n    this.imageDimensions = { x: 0, y: 0 };\n    this.startPanPoz = { x: 0, y: 0 };\n    this.panPoz = { x: 0, y: 0 };\n    this.draggedLine = null;\n    this.scale = 1;\n    this.lines = [];\n    this.highlightedLineId = \"\";\n    this.nameInInput = \"\";\n\n    this.imageLoaded = false;\n    this.currentLineIndex = -1;\n  }\n\n  public setImageDimensions(pos: Pos) {\n    this.imageDimensions = pos;\n    this.imageLoaded = true;\n  }\n\n  public setIsDragging(isDragging: boolean) {\n    if (this.mode === MODES.IMAGE) {\n      this.isDragging = isDragging;\n    }\n  }\n\n  public handleMouseEnter = () => {\n    if (this.mode === MODES.IMAGE) {\n      document.getElementsByTagName(\"body\")[0].classList.add(\"stop-scrolling\");\n    }\n  };\n\n  public handleMouseLeave = () => {\n    if (this.mode === MODES.IMAGE) {\n      document.getElementsByTagName(\"body\")[0].classList.remove(\"stop-scrolling\");\n      this.setIsDragging(false);\n    }\n  };\n\n  public setContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  public setStartPanPoz = (panPos: Pos) => {\n    this.startPanPoz = panPos;\n  };\n\n  public setPanPoz = (panPos: Pos) => {\n    this.panPoz = panPos;\n  };\n\n  public setScale = (scale: number) => {\n    this.scale = scale;\n  };\n\n  public handleMouseDown = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      this.setIsDragging(true);\n      this.setStartPanPoz({ x: e.clientX - this.panPoz.x, y: e.clientY - this.panPoz.y });\n    }\n  };\n\n  public handleMouseUp = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      this.setIsDragging(false);\n    }\n  };\n\n  public handleMouseMove = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      if (this.isDragging) {\n        this.setPanPoz({\n          x: e.clientX - this.startPanPoz.x,\n          y: e.clientY - this.startPanPoz.y\n        });\n      }\n    } else if (this.mode === MODES.LINE_EDITING && this.container) {\n      const relativePointPos: Pos = {\n        x: e.clientX - this.container.offsetLeft + window.scrollX,\n        y: e.clientY - this.container.offsetTop + window.scrollY\n      };\n\n      this.draggedLine = relativePointPos;\n    }\n  };\n\n  public handleWheel = (e: WheelEvent) => {\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      const _scale = Math.min(Math.max(0.125, this.scale + e.deltaY * -0.002), 4);\n      this.setScale(_scale);\n    }\n  };\n  public handleScroll = (e: UIEvent) => {\n    e.preventDefault();\n  };\n\n  public loadLinesData = (linesJson: Line[]) => {\n    this.lines = linesJson.map(line => {\n      return {\n        ...line,\n        points: line.points.map(point => ({\n          x: point.x * this.imageDimensions.x,\n          y: point.y * this.imageDimensions.y\n        }))\n      };\n    });\n  };\n\n  public createNewLine = () => {\n    // only create a new line if the old line has points in it\n    if (!this.nameInInput) {\n      alert(\"Please enter a name for the line\");\n      return;\n    }\n\n    this.lines.push({ name: this.nameInInput, points: [], id: uuid() });\n    this.nameInInput = \"\";\n    this.currentLineIndex = this.lines.length - 1;\n  };\n\n  public deleteLastPoint = () => {\n    if (this.lines[this.currentLineIndex] && this.lines[this.currentLineIndex].points.length > 0) {\n      this.lines[this.currentLineIndex].points.pop();\n    }\n  };\n\n  public deleteLine = () => {\n    if (this.lines[this.currentLineIndex]) {\n      this.lines.splice(this.currentLineIndex, 1);\n      this.currentLineIndex--;\n    }\n  };\n\n  public updateSelectedLine = (selectedLineName: string) => {\n    this.currentLineIndex = this.lines.findIndex(line => line.name === selectedLineName);\n  };\n\n  public updateLineNewName = (newName: string) => {\n    this.nameInInput = newName;\n  };\n\n  public editExistingLineName = (newName: string) => {\n    this.lines[this.currentLineIndex].name = newName;\n  };\n\n  public handleClick = (e: MouseEvent) => {\n    if ((this.mode === MODES.INITIAL || this.mode === MODES.LINE_EDITING) && this.container) {\n      this.mode = MODES.LINE_EDITING;\n\n      if (this.currentLineIndex < 0) {\n        alert(\"first create a new line with a name\");\n        return;\n      }\n      const relativePointPos: Pos = {\n        x: e.clientX - this.container.offsetLeft + window.scrollX,\n        y: e.clientY - this.container.offsetTop + window.scrollY\n      };\n\n      this.lines[this.currentLineIndex].points.push(relativePointPos);\n    }\n  };\n\n  public onKeyDown = (e: KeyboardEvent) => {\n    if (e.key === \"Escape\" && this.mode === MODES.LINE_EDITING) {\n      this.mode = MODES.INITIAL;\n      this.draggedLine = null;\n    }\n  };\n}\n","import { createContext, useContext } from \"react\";\nimport DrawingCragsState from \"./drawingCragsState\";\n\nconst drawingCragsState = new DrawingCragsState();\nexport const drawingCragsStoreContext = createContext<DrawingCragsState>(drawingCragsState);\nexport const DrawingCragsStoreProvider = drawingCragsStoreContext.Provider;\n\nexport const useDrawingCragsStore = () => useContext(drawingCragsStoreContext);\n","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\n\nimport styles from \"../drawingCrags.module.scss\";\n\nimport { useDrawingCragsStore } from \"../store\";\nimport { CONTAINER_HEIGHT, CONTAINER_WIDTH } from \"../store/drawingCragsState\";\n\ntype Props = {\n  image: string | undefined;\n  imageStyle: Record<string, string>;\n};\n\nconst Image: React.FC<Props> = ({ image, imageStyle }) => {\n  const store = useDrawingCragsStore();\n  const handleImageLoad = (e: SyntheticEvent<HTMLImageElement, Event>) => {\n    const t = e.target as HTMLImageElement;\n    const ratio = CONTAINER_HEIGHT / CONTAINER_WIDTH;\n    const imageRatio = t.height / t.width;\n\n    let height = 0;\n    let width = 0;\n    // wider than container\n    if (imageRatio < ratio) {\n      width = CONTAINER_WIDTH;\n      height = t.height * (CONTAINER_WIDTH / t.width);\n    } else {\n      height = CONTAINER_HEIGHT;\n      width = t.width * (CONTAINER_HEIGHT / t.height);\n    }\n    store.setImageDimensions({ x: width, y: height });\n  };\n\n  if (image) {\n    return (\n      <img\n        className={styles.cragImage}\n        style={imageStyle}\n        src={image}\n        alt=\"\"\n        onLoad={handleImageLoad}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default observer(Image);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\n\nimport { Line } from \"../types\";\n\ntype Props = {\n  line: Line;\n  selected: boolean;\n};\n\nconst SELECTED_LINE_COLOR = \"#1ad34b\";\nconst DEFAULT_LINE_COLOR = \"#6247cb\";\nconst PolylineRenderer: React.FC<Props> = ({ line, selected }) => {\n  const linePoints = line.points.reduce((acc, point) => `${acc} ${point.x},${point.y}`, \"\");\n\n  const lineColor = selected ? SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;\n  if (line.points.length) {\n    return (\n      <polyline points={linePoints} style={{ stroke: lineColor, fill: \"none\", strokeWidth: 3 }} />\n    );\n  } else return null;\n};\nexport default observer(PolylineRenderer);\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\n\nimport { useDrawingCragsStore } from \"../store\";\n\nimport PolylineRenderer from \"./PolylineRenderer\";\n\nimport styles from \"../drawingCrags.module.scss\";\n\ntype Props = {\n  svgStyle: Record<string, string>;\n};\n\nconst PolylineContainer: React.FC<Props> = ({ svgStyle }) => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const selectedLineId = drawingCragsStore.lines[drawingCragsStore.currentLineIndex]?.id;\n  return (\n    <svg className={styles.svgContainer} style={svgStyle}>\n      {drawingCragsStore.lines.map(line => (\n        <PolylineRenderer key={line.id} line={line} selected={selectedLineId === line.id} />\n      ))}\n    </svg>\n  );\n};\nexport default observer(PolylineContainer);\n","import React, { ChangeEvent } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useDrawingCragsStore } from \"../store\";\n\nimport styles from \"../drawingCrags.module.scss\";\n\nconst LineEditor: React.FC = () => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const handleLineNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    drawingCragsStore.editExistingLineName(e.target.value);\n  };\n\n  const handleDeleteLastPoint = () => {\n    drawingCragsStore.deleteLastPoint();\n  };\n\n  const handleDeleteLine = () => {\n    drawingCragsStore.deleteLine();\n  };\n\n  const handleLineSelectedChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    drawingCragsStore.updateSelectedLine(e.target.value);\n  };\n\n  const selectedLine = drawingCragsStore.lines[drawingCragsStore.currentLineIndex];\n\n  if (!selectedLine) return null;\n  return (\n    <div className={styles.lineEditor}>\n      Line Editor\n      <div className={styles.btn} onClick={handleDeleteLastPoint}>\n        Delete last point\n      </div>\n      <div className={styles.btn} onClick={handleDeleteLine}>\n        Delete Line\n      </div>\n      <div style={{ display: \"inline-block\" }}>\n        <span style={{ paddingRight: \"6px\" }}>Edit Line Name:</span>\n        <input type=\"text\" onChange={handleLineNameChange} value={selectedLine.name} />\n      </div>\n      <div style={{ display: \"inline-block\", marginLeft: \"6px\" }}>\n        {drawingCragsStore.lines.length > 0 && (\n          <>\n            Select Line:\n            <select\n              name=\"linesSelector\"\n              onChange={handleLineSelectedChange}\n              value={selectedLine.name}\n            >\n              {drawingCragsStore.lines.map(line => (\n                <option key={line.id} value={line.name}>\n                  {line.name}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default observer(LineEditor);\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { v1 as uuid } from \"uuid\";\n\nimport { useDrawingCragsStore } from \"./store\";\n\nimport Image from \"./components/Image\";\nimport PolylineContainer from \"./components/PolylineContainer\";\n\nimport styles from \"./drawingCrags.module.scss\";\nimport { CONTAINER_HEIGHT, CONTAINER_WIDTH } from \"./store/drawingCragsState\";\nimport { Line } from \"./types\";\nimport LineEditor from \"./components/LineEditor\";\nimport { toJS } from \"mobx\";\n\nconst downloadObjectAsJson = (exportObj: Record<string, any>) => {\n  const dataStr =\n    \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj, undefined, 2));\n  const downloadAnchorNode = document.createElement(\"a\");\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\"download\", uuid() + \".json\");\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n};\n\nconst DrawingCragsBody: React.FC = () => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const container = React.useRef<HTMLDivElement>(null);\n  const { imageDimensions, panPoz, scale } = drawingCragsStore;\n  const [image, setImage] = useState<string>();\n\n  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const imageUrl = URL.createObjectURL(e.target.files[0]);\n\n      // reset\n      drawingCragsStore.setImageDimensions({ x: 0, y: 0 });\n      drawingCragsStore.setScale(1);\n\n      setImage(imageUrl);\n    }\n  };\n\n  const handleImportData = async (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const fileReader = new FileReader();\n      fileReader.readAsText(e.target.files[0], \"UTF-8\");\n      fileReader.onload = e => {\n        if (e.target?.result) {\n          drawingCragsStore.loadLinesData(JSON.parse(e.target.result as string) as Line[]);\n        }\n      };\n    }\n  };\n  const handleExportData = async () => {\n    drawingCragsStore.lines.forEach(line => {\n      // smaller y is higher\n      // if this case is true it means the first point is lower than the last point, so reverse\n      if (line.points[0].y < line.points[line.points.length - 1].y) {\n        line.points = line.points.reverse();\n      }\n    });\n    downloadObjectAsJson(\n      drawingCragsStore.lines\n        .sort((lineA, lineB) => lineA.points[0].x - lineB.points[0].x)\n        .map(line => {\n          return {\n            ...line,\n            points: line.points.map(point => ({\n              x: point.x / imageDimensions.x,\n              y: point.y / imageDimensions.y\n            }))\n          };\n        })\n    );\n  };\n\n  const imageStyle: Record<string, string> = {};\n\n  const svgStyle: Record<string, string> = {};\n\n  useEffect(() => {\n    if (container.current) {\n      drawingCragsStore.setContainer(container.current);\n    }\n  }, [container]);\n\n  if (imageDimensions.x) {\n    imageStyle[\"width\"] = `${imageDimensions.x * scale}px`;\n    imageStyle[\"height\"] = `${imageDimensions.y * scale}px`;\n    // imageStyle[\"transform\"] = `scale(${scale})`;\n    svgStyle[\"transform\"] = `scale(${scale})`;\n    svgStyle[\"width\"] = `${imageDimensions.x * scale}px`;\n    svgStyle[\"height\"] = `${imageDimensions.y * scale}px`;\n  }\n  if (panPoz.x) {\n    imageStyle[\"left\"] = `${panPoz.x}px`;\n    svgStyle[\"left\"] = `${panPoz.x}px`;\n  }\n  if (panPoz.y) {\n    imageStyle[\"top\"] = `${panPoz.y}px`;\n    svgStyle[\"top\"] = `${panPoz.y}px`;\n  }\n\n  const handleDrawLineCLick = () => {\n    drawingCragsStore.createNewLine();\n  };\n\n  const handleLineNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    drawingCragsStore.updateLineNewName(e.target.value);\n  };\n\n  return (\n    <div className={styles.drawingCrags}>\n      <h2>Drawing Crags</h2>\n      <div>\n        <div>Welcome to the drawing crags app!</div>\n        <div>\n          To use the app:\n          <ul>\n            <li>Upload click on the upload crag image button to upload an image</li>\n            <li>Give a name to a line and create a new line</li>\n            <li>Start clicking on the image to draw the line points</li>\n            <li>Export the result file using the Export Lines Data button</li>\n          </ul>\n        </div>\n        <div style={{ fontSize: \"90%\", color: \"#727272\" }}>\n          * You can also upload a previously generated file using the Import Lines Data button and\n          edit Lines\n          <br />\n          Play around with the system a bit, we're sure you'll figure things out :)\n        </div>\n        <br />\n      </div>\n      <div>\n        <div className={styles.btnContainer}>\n          <div>\n            {drawingCragsStore.imageLoaded && (\n              <>\n                <div className={styles.btn} onClick={handleDrawLineCLick}>\n                  + New Line\n                </div>\n                <div className={styles.lineName}>\n                  <input\n                    type=\"text\"\n                    onChange={handleLineNameChange}\n                    value={drawingCragsStore.nameInInput}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n          <div>\n            <label className={styles.fileUpload}>\n              <input type=\"file\" multiple accept=\"image/*\" onChange={handleImageChange} />\n              Upload Crag Image\n            </label>\n            <label className={styles.fileUpload}>\n              <input type=\"file\" onChange={handleImportData} />\n              Import Lines Data\n            </label>\n            <div className={styles.btn + \" \" + styles.last} onClick={handleExportData}>\n              Export Lines Data\n            </div>\n          </div>\n        </div>\n        <LineEditor />\n      </div>\n      <div\n        ref={container}\n        className={styles.imageContainer}\n        onMouseEnter={drawingCragsStore.handleMouseEnter}\n        onMouseLeave={drawingCragsStore.handleMouseLeave}\n        onMouseDown={drawingCragsStore.handleMouseDown}\n        onMouseUp={drawingCragsStore.handleMouseUp}\n        onClick={drawingCragsStore.handleClick}\n        onMouseMove={drawingCragsStore.handleMouseMove}\n        onWheel={drawingCragsStore.handleWheel}\n        onScroll={drawingCragsStore.handleScroll}\n        style={svgStyle}\n      >\n        <Image image={image} imageStyle={imageStyle} />\n        <PolylineContainer svgStyle={svgStyle} />\n      </div>\n    </div>\n  );\n};\nexport default observer(DrawingCragsBody);\n","import DrawingCragsBody from \"./drawingCragsBody\";\nimport { DrawingCragsStoreProvider } from \"./store\";\nimport DrawingCragsState from \"./store/drawingCragsState\";\n\nconst drawingCragsState = new DrawingCragsState();\n\nconst DrawingCrags: React.FC = () => {\n  return (\n    <DrawingCragsStoreProvider value={drawingCragsState}>\n      <DrawingCragsBody />\n    </DrawingCragsStoreProvider>\n  );\n};\nexport default DrawingCrags;\n","import DrawingCrags from \"pages/drawingCrags\";\nimport React from \"react\";\n\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  return <DrawingCrags />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from 'pages/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawingCrags\":\"drawingCrags_drawingCrags__3pW90\",\"imageContainer\":\"drawingCrags_imageContainer__36Bch\",\"cragImage\":\"drawingCrags_cragImage__vtfuJ\",\"svgContainer\":\"drawingCrags_svgContainer__3H_v0\",\"btn\":\"drawingCrags_btn__J0OEV\",\"last\":\"drawingCrags_last__1BVBA\",\"fileUpload\":\"drawingCrags_fileUpload__1zDh6\",\"btnContainer\":\"drawingCrags_btnContainer__3jUL_\",\"lineName\":\"drawingCrags_lineName__AiLPr\",\"lineEditor\":\"drawingCrags_lineEditor__BTi0e\"};"],"sourceRoot":""}