{"version":3,"sources":["pages/drawingCrags/drawingCrags.module.scss","pages/drawingCrags/store/drawingCragsState.ts","pages/drawingCrags/store/index.ts","pages/drawingCrags/components/Image.tsx","pages/drawingCrags/components/SvgCircle.tsx","pages/drawingCrags/components/SvgContent.tsx","pages/drawingCrags/components/SvgContainer.tsx","pages/drawingCrags/components/Header.tsx","pages/drawingCrags/components/LineEditor.tsx","pages/drawingCrags/components/ActionBar.tsx","pages/drawingCrags/drawingCragsBody.tsx","pages/drawingCrags/index.tsx","pages/app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","MODES","CONTAINER_WIDTH","drawingCragsState","imageDimensions","mode","container","isDragging","startPanPoz","panPoz","draggedLine","scale","nameInInput","highlightedLineId","lines","currentLineIndex","imageLoaded","isEditingLine","currentEditedPoint","handleMouseEnter","IMAGE","document","getElementsByTagName","classList","add","handleMouseLeave","remove","setIsDragging","setContainer","setStartPanPoz","panPos","setPanPoz","setScale","handleMouseDown","e","preventDefault","x","clientX","y","clientY","handleMouseUp","handleMouseMove","LINE_EDITING","relativePointPos","offsetLeft","window","scrollX","offsetTop","scrollY","handleWheel","_scale","Math","min","max","deltaY","handleScroll","loadLinesData","linesJson","map","line","points","point","createNewLine","push","name","id","uuid","length","alert","deleteLastPoint","pop","deleteLine","splice","updateSelectedLine","selectedLineName","findIndex","updateLineNewName","newName","editExistingLineName","handleClick","INITIAL","setLinePoint","lineId","pointIndex","newPosition","lineIndex","onKeyDown","key","handlePointPointerDown","currentTarget","setPointerCapture","pointerId","active","handleSvgPointerMove","bbox","getBoundingClientRect","left","top","handleSvgPointerUp","makeAutoObservable","this","pos","DrawingCragsState","drawingCragsStoreContext","createContext","DrawingCragsStoreProvider","Provider","useDrawingCragsStore","useContext","observer","image","imageStyle","store","className","styles","cragImage","style","src","alt","onLoad","t","target","height","width","CONTAINER_HEIGHT","setImageDimensions","props","positionX","positionY","fill","isActive","cx","cy","r","onPointerDown","onClick","stopPropagation","isSelected","linePoints","reduce","acc","lineColor","lineBreakpoints","index","stroke","strokeWidth","svgStyle","selectedLineId","svgContainer","onPointerUp","onPointerMove","filter","Header","fontSize","color","drawingCragsStore","selectedLine","lineEditor","btn","display","paddingRight","type","onChange","value","marginLeft","downloadObjectAsJson","exportObj","dataStr","encodeURIComponent","JSON","stringify","undefined","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","onImageChange","handleImportData","a","files","fileReader","FileReader","readAsText","onload","result","parse","handleExportData","forEach","reverse","sort","lineA","lineB","btnContainer","lineName","fileUpload","multiple","accept","imageUrl","URL","createObjectURL","last","React","useRef","useState","setImage","useEffect","current","addEventListener","removeEventListener","drawingCrags","ref","imageContainer","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onMouseMove","onWheel","onScroll","DrawingCrags","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e041d572.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawingCrags\":\"drawingCrags_drawingCrags__3pW90\",\"imageContainer\":\"drawingCrags_imageContainer__36Bch\",\"cragImage\":\"drawingCrags_cragImage__vtfuJ\",\"svgContainer\":\"drawingCrags_svgContainer__3H_v0\",\"btn\":\"drawingCrags_btn__J0OEV\",\"last\":\"drawingCrags_last__1BVBA\",\"fileUpload\":\"drawingCrags_fileUpload__1zDh6\",\"btnContainer\":\"drawingCrags_btnContainer__3jUL_\",\"lineName\":\"drawingCrags_lineName__AiLPr\",\"lineEditor\":\"drawingCrags_lineEditor__BTi0e\"};","import { makeAutoObservable } from 'mobx';\nimport { WheelEvent, UIEvent, MouseEvent } from 'react';\nimport { Line, Pos } from '../types';\nimport { v1 as uuid } from 'uuid';\n\nexport const CONTAINER_HEIGHT = 600;\nexport const CONTAINER_WIDTH = 1200;\n\nenum MODES {\n  INITIAL = 'initial',\n  IMAGE = 'image',\n  LINE_EDITING = 'lineEditing',\n}\n\nexport default class drawingCragsState {\n  public imageDimensions: Pos;\n\n  public mode: MODES;\n\n  public container?: HTMLDivElement;\n  public isDragging: boolean;\n  public startPanPoz: Pos;\n  public panPoz: Pos;\n  public draggedLine: Pos | null;\n  public scale: number;\n\n  public nameInInput: string;\n  public highlightedLineId: string;\n  public lines: Line[];\n  public currentLineIndex: number;\n\n  public imageLoaded: boolean;\n\n  public isEditingLine: boolean;\n\n  public currentEditedPoint: {\n    active: boolean;\n    lineId: string;\n    pointIndex: number;\n  };\n\n  constructor() {\n    makeAutoObservable(this, {});\n\n    this.isDragging = false;\n    this.mode = MODES.INITIAL;\n    this.imageDimensions = { x: 0, y: 0 };\n    this.startPanPoz = { x: 0, y: 0 };\n    this.panPoz = { x: 0, y: 0 };\n    this.draggedLine = null;\n    this.scale = 1;\n    this.lines = [];\n    this.highlightedLineId = '';\n    this.nameInInput = '';\n\n    this.imageLoaded = false;\n    this.isEditingLine = false;\n    this.currentLineIndex = -1;\n\n    this.currentEditedPoint = {\n      active: false,\n      lineId: '',\n      pointIndex: 0,\n    };\n  }\n\n  public setImageDimensions(pos: Pos) {\n    this.imageDimensions = pos;\n    this.imageLoaded = true;\n  }\n\n  public setIsDragging(isDragging: boolean) {\n    if (this.mode === MODES.IMAGE) {\n      this.isDragging = isDragging;\n    }\n  }\n\n  public handleMouseEnter = () => {\n    if (this.mode === MODES.IMAGE) {\n      document.getElementsByTagName('body')[0].classList.add('stop-scrolling');\n    }\n  };\n\n  public handleMouseLeave = () => {\n    if (this.mode === MODES.IMAGE) {\n      document.getElementsByTagName('body')[0].classList.remove('stop-scrolling');\n      this.setIsDragging(false);\n    }\n  };\n\n  public setContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  public setStartPanPoz = (panPos: Pos) => {\n    this.startPanPoz = panPos;\n  };\n\n  public setPanPoz = (panPos: Pos) => {\n    this.panPoz = panPos;\n  };\n\n  public setScale = (scale: number) => {\n    this.scale = scale;\n  };\n\n  public handleMouseDown = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      this.setIsDragging(true);\n      this.setStartPanPoz({ x: e.clientX - this.panPoz.x, y: e.clientY - this.panPoz.y });\n    }\n  };\n\n  public handleMouseUp = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      this.setIsDragging(false);\n    }\n  };\n\n  public handleMouseMove = (e: MouseEvent) => {\n    e.preventDefault();\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      if (this.isDragging) {\n        this.setPanPoz({\n          x: e.clientX - this.startPanPoz.x,\n          y: e.clientY - this.startPanPoz.y,\n        });\n      }\n    } else if (this.mode === MODES.LINE_EDITING && this.container) {\n      const relativePointPos: Pos = {\n        x: e.clientX - this.container.offsetLeft + window.scrollX,\n        y: e.clientY - this.container.offsetTop + window.scrollY,\n      };\n\n      this.draggedLine = relativePointPos;\n    }\n  };\n\n  public handleWheel = (e: WheelEvent) => {\n    if (!this.imageLoaded) return;\n    if (this.mode === MODES.IMAGE) {\n      const _scale = Math.min(Math.max(0.125, this.scale + e.deltaY * -0.002), 4);\n      this.setScale(_scale);\n    }\n  };\n  public handleScroll = (e: UIEvent) => {\n    e.preventDefault();\n  };\n\n  public loadLinesData = (linesJson: Line[]) => {\n    this.lines = linesJson.map(line => {\n      return {\n        ...line,\n        points: line.points.map(point => ({\n          x: point.x * this.imageDimensions.x,\n          y: point.y * this.imageDimensions.y,\n        })),\n      };\n    });\n  };\n\n  public createNewLine = () => {\n    // only create a new line if the old line has points in it\n    if (!this.nameInInput) {\n      alert('Please enter a name for the line');\n      return;\n    }\n\n    this.lines.push({ name: this.nameInInput, points: [], id: uuid() });\n    this.nameInInput = '';\n    this.currentLineIndex = this.lines.length - 1;\n  };\n\n  public deleteLastPoint = () => {\n    if (this.lines[this.currentLineIndex] && this.lines[this.currentLineIndex].points.length > 0) {\n      this.lines[this.currentLineIndex].points.pop();\n    }\n  };\n\n  public deleteLine = () => {\n    if (this.lines[this.currentLineIndex]) {\n      this.lines.splice(this.currentLineIndex, 1);\n      this.currentLineIndex--;\n    }\n  };\n\n  public updateSelectedLine = (selectedLineName: string) => {\n    this.currentLineIndex = this.lines.findIndex(line => line.name === selectedLineName);\n  };\n\n  public updateLineNewName = (newName: string) => {\n    this.nameInInput = newName;\n  };\n\n  public editExistingLineName = (newName: string) => {\n    this.lines[this.currentLineIndex].name = newName;\n  };\n\n  public handleClick = (e: MouseEvent) => {\n    if ((this.mode === MODES.INITIAL || this.mode === MODES.LINE_EDITING) && this.container) {\n      this.mode = MODES.LINE_EDITING;\n\n      if (this.currentLineIndex < 0) {\n        alert('first create a new line with a name');\n        return;\n      }\n      const relativePointPos: Pos = {\n        x: e.clientX - this.container.offsetLeft + window.scrollX,\n        y: e.clientY - this.container.offsetTop + window.scrollY,\n      };\n\n      this.lines[this.currentLineIndex].points.push(relativePointPos);\n    }\n  };\n\n  public setLinePoint = (lineId: string, pointIndex: number, newPosition: Pos) => {\n    const lineIndex = this.lines.findIndex(line => line.id === lineId);\n\n    if (lineIndex !== -1) {\n      this.lines[lineIndex].points[pointIndex] = newPosition;\n    }\n  };\n\n  public onKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'Escape' && this.mode === MODES.LINE_EDITING) {\n      this.mode = MODES.INITIAL;\n      this.draggedLine = null;\n    }\n  };\n\n  public handlePointPointerDown = (\n    e: React.PointerEvent<SVGCircleElement>,\n    lineId: string,\n    pointIndex: number,\n  ) => {\n    const el = e.currentTarget;\n    el.setPointerCapture(e.pointerId);\n    this.currentEditedPoint = {\n      active: true,\n      lineId,\n      pointIndex,\n    };\n  };\n\n  public handleSvgPointerMove = (e: React.PointerEvent) => {\n    const { active, lineId, pointIndex } = this.currentEditedPoint;\n\n    if (active) {\n      const bbox = e.currentTarget.getBoundingClientRect();\n      const x = e.clientX - bbox.left;\n      const y = e.clientY - bbox.top;\n\n      this.setLinePoint(lineId, pointIndex, {\n        x,\n        y,\n      });\n    }\n  };\n\n  public handleSvgPointerUp = (e: React.PointerEvent) => {\n    if (this.currentEditedPoint.active) {\n      this.currentEditedPoint = {\n        active: false,\n        lineId: '',\n        pointIndex: 0,\n      };\n    }\n  };\n}\n","import { createContext, useContext } from 'react';\nimport DrawingCragsState from './drawingCragsState';\n\nconst drawingCragsState = new DrawingCragsState();\nexport const drawingCragsStoreContext = createContext<DrawingCragsState>(drawingCragsState);\nexport const DrawingCragsStoreProvider = drawingCragsStoreContext.Provider;\n\nexport const useDrawingCragsStore = () => useContext(drawingCragsStoreContext);\n","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\n\nimport styles from '../drawingCrags.module.scss';\n\nimport { useDrawingCragsStore } from '../store';\nimport { CONTAINER_HEIGHT, CONTAINER_WIDTH } from '../store/drawingCragsState';\n\ntype Props = {\n  image: string | undefined;\n  imageStyle: Record<string, string>;\n};\n\nconst Image: React.FC<Props> = ({ image, imageStyle }) => {\n  const store = useDrawingCragsStore();\n  const handleImageLoad = (e: SyntheticEvent<HTMLImageElement, Event>) => {\n    const t = e.target as HTMLImageElement;\n    const ratio = CONTAINER_HEIGHT / CONTAINER_WIDTH;\n    const imageRatio = t.height / t.width;\n\n    let height = 0;\n    let width = 0;\n    // wider than container\n    if (imageRatio < ratio) {\n      width = CONTAINER_WIDTH;\n      height = t.height * (CONTAINER_WIDTH / t.width);\n    } else {\n      height = CONTAINER_HEIGHT;\n      width = t.width * (CONTAINER_HEIGHT / t.height);\n    }\n    store.setImageDimensions({ x: width, y: height });\n  };\n\n  if (image) {\n    return (\n      <img\n        className={styles.cragImage}\n        style={imageStyle}\n        src={image}\n        alt=\"\"\n        onLoad={handleImageLoad}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default observer(Image);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useDrawingCragsStore } from '../store';\n\ntype Props = {\n  positionY: number;\n  positionX: number;\n  fill: string;\n  pointIndex: number;\n  lineId: string;\n};\n\nconst Circle: React.FC<Props> = props => {\n  const { positionX, positionY, fill, lineId, pointIndex } = props;\n  const { handlePointPointerDown, currentEditedPoint } = useDrawingCragsStore();\n\n  const isActive =\n    currentEditedPoint.lineId === lineId && currentEditedPoint.pointIndex === pointIndex;\n\n  return (\n    <circle\n      cx={positionX}\n      cy={positionY}\n      r={4}\n      onPointerDown={e => handlePointPointerDown(e, lineId, pointIndex)}\n      fill={isActive ? 'blue' : fill}\n      onClick={(e: React.MouseEvent) => e.stopPropagation()}\n    />\n  );\n};\n\nexport default observer(Circle);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { useDrawingCragsStore } from '../store';\n\nimport { Pos } from '../types';\nimport Circle from './SvgCircle';\n\ntype Props = {\n  points: Array<Pos>;\n  isSelected: boolean;\n  lineId: string;\n};\n\nconst SELECTED_LINE_COLOR = '#1ad34b';\nconst DEFAULT_LINE_COLOR = '#6247cb';\nconst SvgContent: React.FC<Props> = ({ points, isSelected, lineId }) => {\n  const { draggedLine } = useDrawingCragsStore();\n\n  const linePoints = (isSelected && draggedLine ? [...points, draggedLine] : points).reduce(\n    (acc, point) => `${acc} ${point.x},${point.y}`,\n    '',\n  );\n\n  const lineColor = isSelected ? SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;\n\n  const lineBreakpoints = points.map((point, index) => {\n    return (\n      <Circle\n        key={`${point.y}-${point.y}-circle`}\n        positionY={point.y}\n        positionX={point.x}\n        fill={lineColor}\n        pointIndex={index}\n        lineId={lineId}\n      />\n    );\n  });\n\n  return (\n    <>\n      <polyline points={linePoints} style={{ stroke: lineColor, fill: 'none', strokeWidth: 3 }} />\n      {lineBreakpoints}\n    </>\n  );\n};\nexport default observer(SvgContent);\n","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\n\nimport { useDrawingCragsStore } from '../store';\n\nimport SvgContent from './SvgContent';\n\nimport styles from '../drawingCrags.module.scss';\n\ntype Props = {\n  svgStyle: Record<string, string>;\n};\n\nconst PolylineContainer: React.FC<Props> = ({ svgStyle }) => {\n  const {\n    lines,\n    currentLineIndex,\n    handleSvgPointerMove,\n    handleSvgPointerUp,\n  } = useDrawingCragsStore();\n\n  const selectedLineId = lines[currentLineIndex]?.id;\n  return (\n    <svg\n      className={styles.svgContainer}\n      style={svgStyle}\n      onPointerUp={handleSvgPointerUp}\n      onPointerMove={handleSvgPointerMove}\n    >\n      {lines\n        .filter(({ points }) => points.length)\n        .map(({ id, points }) => {\n          return (\n            <SvgContent key={id} points={points} isSelected={selectedLineId === id} lineId={id} />\n          );\n        })}\n    </svg>\n  );\n};\nexport default observer(PolylineContainer);\n","import React from 'react';\n\nconst Header = () => {\n  return (\n    <>\n      <h2>Drawing Crags</h2>\n      <div>\n        <div>Welcome to the drawing crags app!</div>\n        <div>\n          To use the app:\n          <ul>\n            <li>Upload click on the upload crag image button to upload an image</li>\n            <li>Give a name to a line and create a new line</li>\n            <li>Start clicking on the image to draw the line points</li>\n            <li>When done drawing a line, press \"Escape\" on keyboard to dismiss next point</li>\n            <li>Export the result file using the Export Lines Data button</li>\n          </ul>\n        </div>\n        <div style={{ fontSize: '90%', color: '#727272' }}>\n          * You can also upload a previously generated file using the Import Lines Data button and\n          edit Lines\n          <br />\n          Play around with the system a bit, we're sure you'll figure things out :)\n        </div>\n        <br />\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { ChangeEvent } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useDrawingCragsStore } from '../store';\n\nimport styles from '../drawingCrags.module.scss';\n\nconst LineEditor: React.FC = () => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const handleLineNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    drawingCragsStore.editExistingLineName(e.target.value);\n  };\n\n  const handleDeleteLastPoint = () => {\n    drawingCragsStore.deleteLastPoint();\n  };\n\n  const handleDeleteLine = () => {\n    drawingCragsStore.deleteLine();\n  };\n\n  const handleLineSelectedChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    drawingCragsStore.updateSelectedLine(e.target.value);\n  };\n\n  if (!drawingCragsStore.lines.length) {\n    return null;\n  }\n\n  const selectedLine = drawingCragsStore.lines[drawingCragsStore.currentLineIndex];\n\n  return (\n    <div className={styles.lineEditor}>\n      {selectedLine && (\n        <>\n          <div className={styles.btn} onClick={handleDeleteLastPoint}>\n            Delete last point\n          </div>\n          <div className={styles.btn} onClick={handleDeleteLine}>\n            Delete Line\n          </div>\n          <div style={{ display: 'inline-block' }}>\n            <span style={{ paddingRight: '6px' }}>Edit Line Name:</span>\n            <input type=\"text\" onChange={handleLineNameChange} value={selectedLine?.name} />\n          </div>\n        </>\n      )}\n      <div style={{ display: 'inline-block', marginLeft: '6px' }}>\n        {drawingCragsStore.lines.length > 0 && (\n          <>\n            Select line to edit:\n            <select\n              name=\"linesSelector\"\n              onChange={handleLineSelectedChange}\n              value={selectedLine?.name}\n            >\n              <option key=\"select-line\" value=\"\">\n                ---------\n              </option>\n              {drawingCragsStore.lines.map(line => (\n                <option key={line.id} value={line.name}>\n                  {line.name}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default observer(LineEditor);\n","import React, { ChangeEvent } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { v1 as uuid } from 'uuid';\n\nimport { useDrawingCragsStore } from '../store';\n\nimport { Line } from '../types';\nimport LineEditor from './LineEditor';\nimport styles from '../drawingCrags.module.scss';\n\nconst downloadObjectAsJson = (exportObj: Record<string, any>) => {\n  const dataStr =\n    'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(exportObj, undefined, 2));\n  const downloadAnchorNode = document.createElement('a');\n  downloadAnchorNode.setAttribute('href', dataStr);\n  downloadAnchorNode.setAttribute('download', uuid() + '.json');\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n};\n\ntype Props = {\n  onImageChange: Function;\n};\n\nconst ActionBar: React.FC<Props> = ({ onImageChange }) => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const { imageDimensions } = drawingCragsStore;\n\n  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const imageUrl = URL.createObjectURL(e.target.files[0]);\n\n      // reset\n      drawingCragsStore.setImageDimensions({ x: 0, y: 0 });\n      drawingCragsStore.setScale(1);\n\n      onImageChange(imageUrl);\n    }\n  };\n\n  const handleImportData = async (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const fileReader = new FileReader();\n      fileReader.readAsText(e.target.files[0], 'UTF-8');\n      fileReader.onload = e => {\n        if (e.target?.result) {\n          drawingCragsStore.loadLinesData(JSON.parse(e.target.result as string) as Line[]);\n        }\n      };\n    }\n  };\n  const handleExportData = async () => {\n    drawingCragsStore.lines.forEach(line => {\n      // smaller y is higher\n      // if this case is true it means the first point is lower than the last point, so reverse\n      if (line.points[0].y < line.points[line.points.length - 1].y) {\n        line.points = line.points.reverse();\n      }\n    });\n    downloadObjectAsJson(\n      drawingCragsStore.lines\n        .sort((lineA, lineB) => lineA.points[0].x - lineB.points[0].x)\n        .map(line => {\n          return {\n            ...line,\n            points: line.points.map(point => ({\n              x: point.x / imageDimensions.x,\n              y: point.y / imageDimensions.y,\n            })),\n          };\n        }),\n    );\n  };\n\n  return (\n    <div>\n      <div className={styles.btnContainer}>\n        <div>\n          {drawingCragsStore.imageLoaded && (\n            <>\n              <div className={styles.btn} onClick={drawingCragsStore.createNewLine}>\n                + New Line\n              </div>\n              <div className={styles.lineName}>\n                <input\n                  type=\"text\"\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    drawingCragsStore.updateLineNewName(e.target.value)\n                  }\n                  value={drawingCragsStore.nameInInput}\n                />\n              </div>\n            </>\n          )}\n        </div>\n        <div>\n          <label className={styles.fileUpload}>\n            <input type=\"file\" multiple accept=\"image/*\" onChange={handleImageChange} />\n            Upload Crag Image\n          </label>\n          <label className={styles.fileUpload}>\n            <input type=\"file\" onChange={handleImportData} />\n            Import Lines Data\n          </label>\n          <div className={styles.btn + ' ' + styles.last} onClick={handleExportData}>\n            Export Lines Data\n          </div>\n        </div>\n      </div>\n      <LineEditor />\n    </div>\n  );\n};\n\nexport default observer(ActionBar);\n","import React, { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { useDrawingCragsStore } from './store';\n\nimport Image from './components/Image';\nimport PolylineContainer from './components/SvgContainer';\nimport Header from './components/Header';\n\nimport styles from './drawingCrags.module.scss';\nimport ActionBar from './components/ActionBar';\n\nconst DrawingCragsBody: React.FC = () => {\n  const drawingCragsStore = useDrawingCragsStore();\n\n  const container = React.useRef<HTMLDivElement>(null);\n  const { imageDimensions, panPoz, scale } = drawingCragsStore;\n  const [image, setImage] = useState<string>();\n\n  const imageStyle: Record<string, string> = {};\n\n  const svgStyle: Record<string, string> = {};\n\n  useEffect(() => {\n    if (container.current) {\n      drawingCragsStore.setContainer(container.current);\n    }\n  }, [container]);\n\n  if (imageDimensions.x) {\n    imageStyle['width'] = `${imageDimensions.x * scale}px`;\n    imageStyle['height'] = `${imageDimensions.y * scale}px`;\n    // imageStyle[\"transform\"] = `scale(${scale})`;\n    svgStyle['transform'] = `scale(${scale})`;\n    svgStyle['width'] = `${imageDimensions.x * scale}px`;\n    svgStyle['height'] = `${imageDimensions.y * scale}px`;\n  }\n  if (panPoz.x) {\n    imageStyle['left'] = `${panPoz.x}px`;\n    svgStyle['left'] = `${panPoz.x}px`;\n  }\n  if (panPoz.y) {\n    imageStyle['top'] = `${panPoz.y}px`;\n    svgStyle['top'] = `${panPoz.y}px`;\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', drawingCragsStore.onKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', drawingCragsStore.onKeyDown);\n    };\n  }, []);\n\n  return (\n    <div className={styles.drawingCrags}>\n      <Header />\n      <ActionBar onImageChange={setImage} />\n      <div\n        ref={container}\n        className={styles.imageContainer}\n        onMouseEnter={drawingCragsStore.handleMouseEnter}\n        onMouseLeave={drawingCragsStore.handleMouseLeave}\n        onMouseDown={drawingCragsStore.handleMouseDown}\n        onMouseUp={drawingCragsStore.handleMouseUp}\n        onClick={drawingCragsStore.handleClick}\n        onMouseMove={drawingCragsStore.handleMouseMove}\n        onWheel={drawingCragsStore.handleWheel}\n        onScroll={drawingCragsStore.handleScroll}\n        style={svgStyle}\n      >\n        <Image image={image} imageStyle={imageStyle} />\n        <PolylineContainer svgStyle={svgStyle} />\n      </div>\n    </div>\n  );\n};\nexport default observer(DrawingCragsBody);\n","import DrawingCragsBody from './drawingCragsBody';\nimport { DrawingCragsStoreProvider } from './store';\nimport DrawingCragsState from './store/drawingCragsState';\n\nconst drawingCragsState = new DrawingCragsState();\n\nconst DrawingCrags: React.FC = () => {\n  return (\n    <DrawingCragsStoreProvider value={drawingCragsState}>\n      <DrawingCragsBody />\n    </DrawingCragsStoreProvider>\n  );\n};\nexport default DrawingCrags;\n","import DrawingCrags from 'pages/drawingCrags';\nimport React from 'react';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return <DrawingCrags />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from 'pages/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}